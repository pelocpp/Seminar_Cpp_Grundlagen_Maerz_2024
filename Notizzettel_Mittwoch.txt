==============

C++ Grundlagen

Guten Morgen

Mittwoch

Peter Loos 

https://github.com/pelocpp

// ==========================================

Dynamische Speicherverwaltung:

A)  new, delete


B) “Rule of Three”: Kopierkonstruktor, Wertzuweisungsoperator und Destruktor


// ==========================================

int* pArray = new int[10];

-------------------------------------
C#:
int[] numbers = new int[10];

Feature: numbers.length ==> Länge 
-------------------------------------


// ==========================================

C++ ist eine Sprache mit

Value-Semantik    (statisch, Stack)

Pointer-Semantik  (dynamisch, Halde)

Syntax:

Value-Semantik      Zugriff:  Punkt-Operator .

Pointer-Semantik    Zugriff:  Punkt-Operator ->

// ==========================================

Geht eine Wertzuweisung von Objekten in C++:

C#: 

    DynamicArray array1 = new DynamicArray(3);
    array1.fill(10);
    array1.print();

    DynamicArray array2 = new DynamicArray(3);
    array2.fill(20);
    array2.print();

    // Wertzuweisung von Objekten // Wertzuweisung von Referenzen
    array1 = array2;

    // Kopierkontruktor:
    // Keine wirkliche Analogie zu C#
    // kopieren in C#: interface ICloneable


// ==========================================


C#:

Classes are reference types, allocated on the heap and garbage-collected.

Structs are value types allocated on the stack.

Size, Point, struct (Value), int, double

----------------------

C++:

Classes are either pointer types or value types.

Pointer types are allocated on the heap and released with delete.

Value types are allocated on the stack and released, when the function goes out of scope.

// ==========================================



Wann Referenzen

Wann Pointer

=============================================

Hinweis:

Die Schreibweise

pArray[index]

wird abgebildet auf

*(pArray + index)

=======================================================

new, delete

Interessanter:

class Container

  == Daten
  == dynamisch (new, delete)

=======================================================

C#:

int n;

...

int numbers[n];   // dynamisch

Geht in C++ nicht:

int numbers[10];   // konstant

=======================================================

Übung:

DynamicArray

DynamicArray array (100);

....

Länge 10

array.resize (50);

// oder

array.resize (200);


------------------------------------------------

100 auf 90 oder 80 runtergehen .... % Werte


alloc // new : Speicher anlegen

realloc ( aktuellenZeiger, neue Länge  )

------------------------------------------------

Geht das auch einfacher ??????????????????

Ja:

Wie:

Indem ich vorgefertige Klassen aus der Standard Bibliothek (STL) verwende.

------------------------------------------------

Fragmentierung in C++ und C#:

Freispeicherbereiche gibt es mehrere:

Arena // Arenen

Wie geht das in C#:

a) Ich habe Referenzen

b) GC - Garbage Collection

c) Wie erfolgt die Freigabe?? Wie in C++

d) Dann ginge die Defragmentierung NICHT !!!

Truth in C#:

Eine Referenz in C# ist ein DOPPELTER ZEIGER.

DOPPELTE INDIREKTION.

// ====================================================

Beispiel einer Ausführung einer Wertzuweisung:

array1:  len = 3
         data = d70 // aa0

array2:  len = 3
         data = aa0

// ====================================================

Microsoft Technologie: COM  // Component Objekt Model

C++ Realisierung  // Rein Interface getrieben ...

// ==========================================

    class IAccount
    {
    public:
        // getter/setter
        virtual double getAccountNumber() const = 0;
    };


Was ist dieses "= 0";   pure virtual function

Methode OHNE Realiserung.

Idee von "= 0":

Klassen mit virtuellen Methoden haben eine "vtable":

Wie geht Polymorphismus ???

Wie funktioniert der virtuelle Methodenaufrufmechanismus?

Trick:  Neben der Klasse gibt es zur Laufzeit eine Tabelle pro Klasse
        mit Adressen der Methoden DIESER Klasse.

        Vererbung: In dieser Tabelle wird die Adresse der Methode aus der 
                   Basisklasse umkopiert / übernommen.

        Wird die Methode überschrieben:
        Dann wird in dieser Tabelle die Adresse der neuen Methode reinkopiert.


Idee von "= 0": In der vtable steht an dieser Stell "0" // Null-Zeiger drin.


Ein Interface wird "vererbt" - bedeutet aber eher Arbeit,
denn ich muss die Methoden des Interface implementieren.

Hinweis:
Vorteile bezüglich der Verwendung von override
Hätten wir einen der folgenden Fehler gemacht, würde uns der Übersetzer bei Verwendung von override nun neuerdings darauf aufmerksam machen:

In Klasse Derived: void fumc(int) override; - Tippfehler im Namen der Funktion
In Klasse Derived: void func(long) override; - Fehler bei einem Formalparametertyp
In Klasse Base: void func(int); - Schlüsselwort virtual in Klasse Base vergessen


=========================================================

::   Heißt Scope Operator

=========================================================

C++:

= OO - Programmierung
= Generische Programmierung


C++:                       Bjarne Stroustrup

Generische Programmierung: Alexander Stepanow


C++ ==> Bibliothek ==> Alexander Stepanow ergänzt um die Generische Programmierung


Java: Templates
C#:   Generics

Siehe Abbildung in

https://github.com/pelocpp/cpp_modern/blob/master/GeneralSnippets/TemplateClassBasics/TemplatesClassBasics.md


3 - Ebenen - Modell:

Schablone / TEMPLATE

====> wird mit einem Datentyp instanziiert:  KLASSE

Eine Klasse wird ebenfalls instanziiert:  OBJEKT

//=============================================

Ganzzahlige Division:

4 / 8  =============>  0.5  ist falsch

5 / 8  =============>  0

Runden ??????????

Ganzzahlige Division ist mit Abschneiden (to truncate)

Taschenrechner mit Runden.


Technik in der Generische Programmierung:  Template Spezialisierung

Für Speziallfälle des Typnamens T können wir separate Realisierungen schreiben

============================================================

Morgen:   ==>  STL

